reserve_quantity

# self.assertEqual(self.library.reserve_book('Miska', 'Sherlock', 7, 9, M), (False, 'quantity'))
        # self.assertEqual(self.library.reserve_book('Miska', 'Sherlock', 2, 4), (True, 3))
        # self.assertEqual(self.library.reserve_book('Jano', 'Traja patraci', 1, 10), (True, 4))
        # self.assertEqual(self.library.reserve_book('Adam', 'Traja patraci', 7, 12), (True, 5))
        # self.assertEqual(self.library.reserve_book('Katka', 'Traja patraci', 9, 15), (False, 'quantity'))
        # self.assertEqual(self.library.reserve_book('Katka', 'Traja patraci', 11, 14), (True, 7))
        # self.assertEqual(self.library.reserve_book('Miska', 'Traja patraci', 12, 17), (False, 'quantity'))





change_reservation

self.assertEqual(self.library.change_reservation('Miska', 'Sherlock', 10, 'Adam'),
                         (False, 'irrelevant'))  # date
        # self.assertEqual(self.library.change_reservation('Miska', 'Traja patraci', 3, 'Adam'),
        #                (False, 'irrelevant'))  # book
        # self.assertEqual(self.library.change_reservation('Adam', 'Sherlock', 7, 'Jano'),
        #                (False, 'irrelevant'))  # user



check reservation 

 # self.assertEqual(self.library.check_reservation('Katka', 'Sherlock', 20), False)  # non-existing
        # self.assertEqual(self.library.check_reservation('Jano', 'Sherlock', 12), False)  # date
        # self.assertEqual(self.library.check_reservation('Katka', 'Sherlock', 12), False)  # book
        # self.assertEqual(self.library.check_reservation('Katka', 'Sherlock', 9), False)  # user




    # def test_f_check_change_check(self):
    #   self.assertEqual(self.library.check_reservation('Miska', 'Sherlock', 3), True)
    #   self.assertEqual(self.library.change_reservation('Miska', 'Sherlock', 4, 'Adam'), (True, 'ok'))
    #   self.assertEqual(self.library.check_reservation('Miska', 'Sherlock', 3), False)
